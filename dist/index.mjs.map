{"version":3,"sources":["../src/commands/build/index.ts","../src/utils/disposables.ts","../src/utils/renderer.ts","../src/utils/resolve.ts","../src/utils/format-ns.ts","../src/commands/build/utils.ts","../src/utils/args.ts","../src/commands/help/index.ts","../src/commands/theme.ts","../src/index.ts"],"sourcesContent":["// Copyright (c) Tailwind Labs, Inc. (Original)\n// Copyright (c) 2024 devcui (Modified)\n//\n// Licensed under the MIT License. See LICENSE file for details.\n\nimport watcher from '@parcel/watcher';\nimport { compile, env } from '@tailwindcss/node';\nimport { clearRequireCache } from '@tailwindcss/node/require-cache';\nimport { Scanner, type ChangedContent } from '@tailwindcss/oxide';\nimport { Features, transform } from 'lightningcss';\nimport { existsSync, type Stats } from 'node:fs';\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport type { Arg, Result } from '../../utils/args';\nimport { Disposables } from '../../utils/disposables';\nimport {\n  eprintln,\n  formatDuration,\n  header,\n  highlight,\n  println,\n  relative,\n} from '../../utils/renderer';\nimport { drainStdin, outputFile } from './utils';\n\nexport function options() {\n  return {\n    '--input': {\n      type: 'string',\n      description: 'Input json file',\n      alias: '-i',\n    },\n    '--output': {\n      type: 'string',\n      description: 'Output path',\n      alias: '-o',\n    },\n    '--watch': {\n      type: 'boolean | string',\n      description: 'Watch for changes and rebuild as needed',\n      alias: '-w',\n    },\n    '--minify': {\n      type: 'boolean',\n      description: 'Optimize and minify the output',\n      alias: '-m',\n    },\n    '--optimize': {\n      type: 'boolean',\n      description: 'Optimize the output without minifying',\n    },\n    '--cwd': {\n      type: 'string',\n      description: 'The current working directory',\n      default: '.',\n    },\n  } satisfies Arg;\n}\n\nconst css = String.raw;\n\nasync function handleError<T>(fn: () => T): Promise<T> {\n  try {\n    return await fn();\n  } catch (err) {\n    if (err instanceof Error) {\n      eprintln(err.toString());\n    }\n    process.exit(1);\n  }\n}\n\nexport async function handle(args: Result<ReturnType<typeof options>>) {\n  const base = path.resolve(args['--cwd']);\n\n  // Resolve the output as an absolute path.\n  if (args['--output']) {\n    args['--output'] = path.resolve(base, args['--output']);\n  }\n\n  // Resolve the input as an absolute path. If the input is a `-`, then we don't\n  // need to resolve it because this is a flag to indicate that we want to use\n  // `stdin` instead.\n  if (args['--input'] && args['--input'] !== '-') {\n    args['--input'] = path.resolve(base, args['--input']);\n\n    // Ensure the provided `--input` exists.\n    if (!existsSync(args['--input'])) {\n      // eprintln(header());\n      // eprintln();\n      eprintln(\n        `Specified input file ${highlight(relative(args['--input']))} does not exist.`,\n      );\n      process.exit(1);\n    }\n  }\n\n  const start = process.hrtime.bigint();\n\n  const input = args['--input']\n    ? args['--input'] === '-'\n      ? await drainStdin()\n      : await fs.readFile(args['--input'], 'utf-8')\n    : css`\n        @import 'tailwindcss';\n      `;\n\n  const previous = {\n    css: '',\n    optimizedCss: '',\n  };\n\n  async function write(css: string, args: Result<ReturnType<typeof options>>) {\n    let output = css;\n\n    // Optimize the output\n    if (args['--minify'] || args['--optimize']) {\n      if (css !== previous.css) {\n        if (env.DEBUG) console.time('[@tailwindcss/cli] Optimize CSS');\n        const optimizedCss = optimizeCss(css, {\n          file: args['--input'] ?? 'input.css',\n          minify: args['--minify'] ?? false,\n        });\n        if (env.DEBUG) console.timeEnd('[@tailwindcss/cli] Optimize CSS');\n        previous.css = css;\n        previous.optimizedCss = optimizedCss;\n        output = optimizedCss;\n      } else {\n        output = previous.optimizedCss;\n      }\n    }\n\n    // Write the output\n    if (env.DEBUG) console.time('[@tailwindcss/cli] Write output');\n    if (args['--output']) {\n      await outputFile(args['--output'], output);\n    } else {\n      println(output);\n    }\n    if (env.DEBUG) console.timeEnd('[@tailwindcss/cli] Write output');\n  }\n\n  const inputFilePath =\n    args['--input'] && args['--input'] !== '-'\n      ? path.resolve(args['--input'])\n      : null;\n  const inputBasePath = inputFilePath\n    ? path.dirname(inputFilePath)\n    : process.cwd();\n  let fullRebuildPaths: string[] = inputFilePath ? [inputFilePath] : [];\n  async function createCompiler(css: string) {\n    if (env.DEBUG) console.time('[@tailwindcss/cli] Setup compiler');\n    const compiler = await compile(css, {\n      base: inputBasePath,\n      onDependency(path) {\n        fullRebuildPaths.push(path);\n      },\n    });\n\n    const sources = (() => {\n      // Disable auto source detection\n      if (compiler.root === 'none') {\n        return [];\n      }\n\n      // No root specified, use the base directory\n      if (compiler.root === null) {\n        return [{ base, pattern: '**/*' }];\n      }\n\n      // Use the specified root\n      return [compiler.root];\n    })().concat(compiler.globs);\n\n    const scanner = new Scanner({ sources });\n    if (env.DEBUG) console.timeEnd('[@tailwindcss/cli] Setup compiler');\n\n    return [compiler, scanner] as const;\n  }\n  let [compiler, scanner] = await handleError(() => createCompiler(input));\n  // Watch for changes\n  if (args['--watch']) {\n    let cleanupWatchers = await createWatchers(\n      watchDirectories(scanner),\n      async function handle(files) {\n        try {\n          // If the only change happened to the output file, then we don't want to\n          // trigger a rebuild because that will result in an infinite loop.\n          if (files.length === 1 && files[0] === args['--output']) return;\n\n          const changedFiles: ChangedContent[] = [];\n          let rebuildStrategy: 'incremental' | 'full' = 'incremental';\n\n          const resolvedFullRebuildPaths = fullRebuildPaths;\n\n          for (const file of files) {\n            // If one of the changed files is related to the input CSS or JS\n            // config/plugin files, then we need to do a full rebuild because\n            // the theme might have changed.\n            if (resolvedFullRebuildPaths.includes(file)) {\n              rebuildStrategy = 'full';\n\n              // No need to check the rest of the events, because we already know we\n              // need to do a full rebuild.\n              break;\n            }\n\n            // Track new and updated files for incremental rebuilds.\n            changedFiles.push({\n              file,\n              extension: path.extname(file).slice(1),\n            } satisfies ChangedContent);\n          }\n\n          // Re-compile the input\n          const start = process.hrtime.bigint();\n\n          // Track the compiled CSS\n          let compiledCss = '';\n\n          // Scan the entire `base` directory for full rebuilds.\n          if (rebuildStrategy === 'full') {\n            // Read the new `input`.\n            const input = args['--input']\n              ? args['--input'] === '-'\n                ? await drainStdin()\n                : await fs.readFile(args['--input'], 'utf-8')\n              : css`\n                  @import 'tailwindcss';\n                `;\n            clearRequireCache(resolvedFullRebuildPaths);\n            fullRebuildPaths = inputFilePath ? [inputFilePath] : [];\n\n            // Create a new compiler, given the new `input`\n            [compiler, scanner] = await createCompiler(input);\n\n            // Scan the directory for candidates\n            if (env.DEBUG)\n              console.time('[@tailwindcss/cli] Scan for candidates');\n            const candidates = scanner.scan();\n            if (env.DEBUG)\n              console.timeEnd('[@tailwindcss/cli] Scan for candidates');\n\n            // Setup new watchers\n            const newCleanupWatchers = await createWatchers(\n              watchDirectories(scanner),\n              handle,\n            );\n\n            // Clear old watchers\n            await cleanupWatchers();\n\n            cleanupWatchers = newCleanupWatchers;\n\n            // Re-compile the CSS\n            if (env.DEBUG) console.time('[@tailwindcss/cli] Build CSS');\n            compiledCss = compiler.build(candidates);\n            if (env.DEBUG) console.timeEnd('[@tailwindcss/cli] Build CSS');\n          }\n\n          // Scan changed files only for incremental rebuilds.\n          else if (rebuildStrategy === 'incremental') {\n            if (env.DEBUG)\n              console.time('[@tailwindcss/cli] Scan for candidates');\n            const newCandidates = scanner.scanFiles(changedFiles);\n            if (env.DEBUG)\n              console.timeEnd('[@tailwindcss/cli] Scan for candidates');\n\n            // No new candidates found which means we don't need to write to\n            // disk, and can return early.\n            if (newCandidates.length <= 0) {\n              const end = process.hrtime.bigint();\n              eprintln(`Done in ${formatDuration(end - start)}`);\n              return;\n            }\n\n            if (env.DEBUG) console.time('[@tailwindcss/cli] Build CSS');\n            compiledCss = compiler.build(newCandidates);\n            if (env.DEBUG) console.timeEnd('[@tailwindcss/cli] Build CSS');\n          }\n\n          await write(compiledCss, args);\n\n          const end = process.hrtime.bigint();\n          eprintln(`Done in ${formatDuration(end - start)}`);\n        } catch (err) {\n          // Catch any errors and print them to stderr, but don't exit the process\n          // and keep watching.\n          if (err instanceof Error) {\n            eprintln(err.toString());\n          }\n        }\n      },\n    );\n\n    // Abort the watcher if `stdin` is closed to avoid zombie processes. You can\n    // disable this behavior with `--watch=always`.\n    if (args['--watch'] !== 'always') {\n      process.stdin.on('end', () => {\n        cleanupWatchers().then(\n          () => process.exit(0),\n          () => process.exit(1),\n        );\n      });\n    }\n\n    // Keep the process running\n    process.stdin.resume();\n  }\n  if (env.DEBUG) console.time('[@tailwindcss/cli] Scan for candidates');\n  const candidates = scanner.scan();\n  if (env.DEBUG) console.timeEnd('[@tailwindcss/cli] Scan for candidates');\n  if (env.DEBUG) console.time('[@tailwindcss/cli] Build CSS');\n  const output = await handleError(() => compiler.build(candidates));\n  if (env.DEBUG) console.timeEnd('[@tailwindcss/cli] Build CSS');\n  await write(output, args);\n  const end = process.hrtime.bigint();\n  // eprintln(header());\n  // eprintln();\n  eprintln(`Done in ${formatDuration(end - start)}`);\n}\n\nfunction watchDirectories(scanner: Scanner) {\n  return scanner.globs.flatMap((globEntry) => {\n    // We don't want a watcher for negated globs.\n    if (globEntry.pattern[0] === '!') return [];\n\n    // We don't want a watcher for files, only directories.\n    if (globEntry.pattern === '') return [];\n\n    return globEntry.base;\n  });\n}\n\nasync function createWatchers(dirs: string[], cb: (files: string[]) => void) {\n  // Remove any directories that are children of an already watched directory.\n  // If we don't we may not get notified of certain filesystem events regardless\n  // of whether or not they are for the directory that is duplicated.\n\n  // 1. Sort in asc by length\n  dirs = dirs.sort((a, z) => a.length - z.length);\n\n  // 2. Remove any directories that are children of another directory\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const toRemove: any = [];\n\n  // /project-a 0\n  // /project-a/src 1\n\n  for (let i = 0; i < dirs.length; ++i) {\n    for (let j = 0; j < i; ++j) {\n      if (!dirs[i].startsWith(`${dirs[j]}/`)) continue;\n\n      toRemove.push(dirs[i]);\n    }\n  }\n\n  dirs = dirs.filter((dir) => !toRemove.includes(dir));\n\n  // Track all Parcel watchers for each glob.\n  //\n  // When we encounter a change in a CSS file, we need to setup new watchers and\n  // we want to cleanup the old ones we captured here.\n  const watchers = new Disposables();\n\n  // Track all files that were added or changed.\n  const files = new Set<string>();\n\n  // Keep track of the debounce queue to avoid multiple rebuilds.\n  const debounceQueue = new Disposables();\n\n  // A changed file can be watched by multiple watchers, but we only want to\n  // handle the file once. We debounce the handle function with the collected\n  // files to handle them in a single batch and to avoid multiple rebuilds.\n  async function enqueueCallback() {\n    // Dispose all existing macrotasks.\n    await debounceQueue.dispose();\n\n    // Setup a new macrotask to handle the files in batch.\n    debounceQueue.queueMacrotask(() => {\n      cb(Array.from(files));\n      files.clear();\n    });\n  }\n\n  // Setup a watcher for every directory.\n  for (const dir of dirs) {\n    const { unsubscribe } = await watcher.subscribe(\n      dir,\n      async (err, events) => {\n        // Whenever an error occurs we want to let the user know about it but we\n        // want to keep watching for changes.\n        if (err) {\n          console.error(err);\n          return;\n        }\n\n        await Promise.all(\n          events.map(async (event) => {\n            // We currently don't handle deleted files because it doesn't influence\n            // the CSS output. This is because we currently keep all scanned\n            // candidates in a cache for performance reasons.\n            if (event.type === 'delete') return;\n\n            // Ignore directory changes. We only care about file changes\n            let stats: Stats | null = null;\n            try {\n              stats = await fs.lstat(event.path);\n              // eslint-disable-next-line no-empty\n            } catch {}\n            if (!stats?.isFile() && !stats?.isSymbolicLink()) {\n              return;\n            }\n\n            // Track the changed file.\n            files.add(event.path);\n          }),\n        );\n\n        // Handle the tracked files at some point in the future.\n        await enqueueCallback();\n      },\n    );\n\n    // Ensure we cleanup the watcher when we're done.\n    watchers.add(unsubscribe);\n  }\n\n  // Cleanup\n  return async () => {\n    await watchers.dispose();\n    await debounceQueue.dispose();\n  };\n}\n\nfunction optimizeCss(\n  input: string,\n  {\n    file = 'input.css',\n    minify = false,\n  }: { file?: string; minify?: boolean } = {},\n) {\n  function optimize(code: Buffer | Uint8Array) {\n    return transform({\n      filename: file,\n      code,\n      minify,\n      sourceMap: false,\n      drafts: {\n        customMedia: true,\n      },\n      nonStandard: {\n        deepSelectorCombinator: true,\n      },\n      include: Features.Nesting,\n      exclude: Features.LogicalProperties,\n      targets: {\n        safari: (16 << 16) | (4 << 8),\n        ios_saf: (16 << 16) | (4 << 8),\n        firefox: 128 << 16,\n        chrome: 120 << 16,\n      },\n      errorRecovery: true,\n    }).code;\n  }\n\n  // Running Lightning CSS twice to ensure that adjacent rules are merged after\n  // nesting is applied. This creates a more optimized output.\n  return optimize(optimize(Buffer.from(input))).toString();\n}\n","// Copyright (c) Tailwind Labs, Inc. (Original)\n//\n// Licensed under the MIT License. See LICENSE file for details.\n\n/**\n * Disposables allow you to manage resources that can be cleaned up. Each helper\n * function returns a dispose function to clean up the resource.\n *\n * The `dispose` method can be called to clean up all resources at once.\n */\nexport class Disposables {\n  // Track all disposables\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n  #disposables = new Set<Function>([]);\n\n  /**\n   * Enqueue a callback in the macrotasks queue.\n   */\n  queueMacrotask(cb: () => void) {\n    const timer = setTimeout(cb, 0);\n\n    return this.add(() => {\n      clearTimeout(timer);\n    });\n  }\n\n  /**\n   * General purpose disposable function that can be cleaned up.\n   */\n  add(dispose: () => void) {\n    this.#disposables.add(dispose);\n\n    return () => {\n      this.#disposables.delete(dispose);\n\n      dispose();\n    };\n  }\n\n  /**\n   * Dispose all disposables at once.\n   */\n  async dispose() {\n    for (const dispose of this.#disposables) {\n      await dispose();\n    }\n\n    this.#disposables.clear();\n  }\n}\n","// Copyright (c) Tailwind Labs, Inc. (Original)\n//\n// Licensed under the MIT License. See LICENSE file for details.\n\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { stripVTControlCharacters } from 'node:util';\nimport pc from 'picocolors';\nimport { resolve } from '../utils/resolve';\nimport { formatNanoseconds } from './format-ns';\n\nexport const UI = {\n  indent: 2,\n};\nexport function header() {\n  return `${pc.italic(pc.bold(pc.blue('\\u2248')))} tailwind-plugin-theme ${pc.blue(`v${getVersion()}`)}`;\n}\n\nexport function highlight(file: string) {\n  return `${pc.dim(pc.blue('`'))}${pc.blue(file)}${pc.dim(pc.blue('`'))}`;\n}\n\n/**\n * Convert an `absolute` path to a `relative` path from the current working\n * directory.\n */\nexport function relative(\n  to: string,\n  from = process.cwd(),\n  { preferAbsoluteIfShorter = true } = {},\n) {\n  let result = path.relative(from, to);\n  if (!result.startsWith('..')) {\n    result = `.${path.sep}${result}`;\n  }\n\n  if (preferAbsoluteIfShorter && result.length > to.length) {\n    return to;\n  }\n\n  return result;\n}\n\n/**\n * Wrap `text` into multiple lines based on the `width`.\n */\nexport function wordWrap(text: string, width: number) {\n  const words = text.split(' ');\n  const lines = [];\n\n  let line = '';\n  let lineLength = 0;\n  for (const word of words) {\n    const wordLength = stripVTControlCharacters(word).length;\n\n    if (lineLength + wordLength + 1 > width) {\n      lines.push(line);\n      line = '';\n      lineLength = 0;\n    }\n\n    line += (lineLength ? ' ' : '') + word;\n    lineLength += wordLength + (lineLength ? 1 : 0);\n  }\n\n  if (lineLength) {\n    lines.push(line);\n  }\n\n  return lines;\n}\n\n/**\n * Format a duration in nanoseconds to a more human readable format.\n */\nexport function formatDuration(ns: bigint) {\n  const formatted = formatNanoseconds(ns);\n\n  if (ns <= 50 * 1e6) return pc.green(formatted);\n  if (ns <= 300 * 1e6) return pc.blue(formatted);\n  if (ns <= 1000 * 1e6) return pc.yellow(formatted);\n\n  return pc.red(formatted);\n}\n\nexport function indent(value: string, offset = 0) {\n  return `${' '.repeat(offset + UI.indent)}${value}`;\n}\n\n// Rust inspired functions to print to the console:\n\nexport function eprintln(value = '') {\n  process.stderr.write(`${value}\\n`);\n}\n\nexport function println(value = '') {\n  process.stdout.write(`${value}\\n`);\n}\n\nfunction getVersion(): string {\n  const { version } = JSON.parse(\n    fs.readFileSync(\n      resolve('@rymcu/tailwind-plugin-theme/package.json'),\n      'utf-8',\n    ),\n  );\n  return version;\n}\n","// Copyright (c) Tailwind Labs, Inc. (Original)\n//\n// Licensed under the MIT License. See LICENSE file for details.\n\nimport EnhancedResolve from 'enhanced-resolve';\nimport fs from 'node:fs';\nimport { createRequire } from 'node:module';\n\nconst localResolve = createRequire(import.meta.url).resolve;\nexport function resolve(id: string) {\n  return localResolve(id);\n}\n\nconst resolver = EnhancedResolve.ResolverFactory.createResolver({\n  fileSystem: new EnhancedResolve.CachedInputFileSystem(fs, 4000),\n  useSyncFileSystemCalls: true,\n  extensions: ['.css'],\n  mainFields: ['style'],\n  conditionNames: ['style'],\n});\nexport function resolveCssId(id: string, base: string) {\n  return resolver.resolveSync({}, base, id);\n}\n","// Copyright (c) Tailwind Labs, Inc. (Original)\n//\n// Licensed under the MIT License. See LICENSE file for details.\n\nexport function formatNanoseconds(input: bigint | number) {\n  let ns = typeof input === 'number' ? BigInt(input) : input;\n\n  if (ns < 1_000n) return `${ns}ns`;\n  ns /= 1_000n;\n\n  if (ns < 1_000n) return `${ns}µs`;\n  ns /= 1_000n;\n\n  if (ns < 1_000n) return `${ns}ms`;\n  ns /= 1_000n;\n\n  if (ns < 60n) return `${ns}s`;\n  ns /= 60n;\n\n  if (ns < 60n) return `${ns}m`;\n  ns /= 60n;\n\n  if (ns < 24n) return `${ns}h`;\n  ns /= 24n;\n\n  return `${ns}d`;\n}\n","// Copyright (c) Tailwind Labs, Inc. (Original)\n//\n// Licensed under the MIT License. See LICENSE file for details.\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\n\nexport function drainStdin() {\n  return new Promise<string>((resolve, reject) => {\n    let result = '';\n    process.stdin.on('data', (chunk) => {\n      result += chunk;\n    });\n    process.stdin.on('end', () => resolve(result));\n    process.stdin.on('error', (err) => reject(err));\n  });\n}\n\nexport async function outputFile(file: string, contents: string) {\n  try {\n    const currentContents = await fs.readFile(file, 'utf8');\n    if (currentContents === contents) return; // Skip writing the file\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  // Ensure the parent directories exist\n  await fs.mkdir(path.dirname(file), { recursive: true });\n\n  // Write the file\n  await fs.writeFile(file, contents, 'utf8');\n}\n","// Copyright (c) Tailwind Labs, Inc. (Original)\n//\n// Licensed under the MIT License. See LICENSE file for details.\n\nimport parse from 'mri';\n\n// Definition of the arguments for a command in the CLI.\nexport type Arg = {\n  [key: `--${string}`]: {\n    type: keyof Types;\n    description: string;\n    alias?: `-${string}`;\n    default?: Types[keyof Types];\n  };\n};\n\n// Each argument will have a type and we want to convert the incoming raw string\n// based value to the correct type. We can't use pure TypeScript types because\n// these don't exist at runtime. Instead, we define a string-based type that\n// maps to a TypeScript type.\ntype Types = {\n  boolean: boolean;\n  number: number | null;\n  string: string | null;\n  'boolean | string': boolean | string | null;\n  'number | string': number | string | null;\n  'boolean | number': boolean | number | null;\n  'boolean | number | string': boolean | number | string | null;\n};\n\n// Convert the `Arg` type to a type that can be used at runtime.\n//\n// E.g.:\n//\n// Arg:\n// ```\n// { '--input': { type: 'string', description: 'Input file', alias: '-i' } }\n// ```\n//\n// Command:\n// ```\n// ./tailwindcss -i input.css\n// ./tailwindcss --input input.css\n// ```\n//\n// Result type:\n// ```\n// {\n//   _: string[],             // All non-flag arguments\n//   '--input': string | null // The `--input` flag will be filled with `null`, if the flag is not used.\n//                            // The `null` type will not be there if `default` is provided.\n// }\n// ```\n//\n// Result runtime object:\n// ```\n// {\n//   _: [],\n//   '--input': 'input.css'\n// }\n// ```\nexport type Result<T extends Arg> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [K in keyof T]: T[K] extends { type: keyof Types; default?: any }\n    ? undefined extends T[K]['default']\n      ? Types[T[K]['type']]\n      : NonNullable<Types[T[K]['type']]>\n    : never;\n} & {\n  // All non-flag arguments\n  _: string[];\n};\n\nexport function args<const T extends Arg>(\n  options: T,\n  argv = process.argv.slice(2),\n): Result<T> {\n  const parsed = parse(argv);\n\n  const result: { _: string[]; [key: string]: unknown } = {\n    _: parsed._,\n  };\n\n  for (const [\n    flag,\n    { type, alias, default: defaultValue = type === 'boolean' ? false : null },\n  ] of Object.entries(options)) {\n    // Start with the default value\n    result[flag] = defaultValue;\n\n    // Try to find the `alias`, and map it to long form `flag`\n    if (alias) {\n      const key = alias.slice(1);\n      if (parsed[key] !== undefined) {\n        result[flag] = convert(parsed[key], type);\n      }\n    }\n\n    // Try to find the long form `flag`\n    {\n      const key = flag.slice(2);\n      if (parsed[key] !== undefined) {\n        result[flag] = convert(parsed[key], type);\n      }\n    }\n  }\n\n  return result as Result<T>;\n}\n\n// ---\n\ntype ArgumentType = string | boolean;\n\n// Try to convert the raw incoming `value` (which will be a string or a boolean,\n// this is coming from `mri`'s parse function'), to the correct type based on\n// the `type` of the argument.\nfunction convert<T extends keyof Types>(value: string | boolean, type: T) {\n  switch (type) {\n    case 'string':\n      return convertString(value);\n    case 'boolean':\n      return convertBoolean(value);\n    case 'number':\n      return convertNumber(value);\n    case 'boolean | string':\n      return convertBoolean(value) ?? convertString(value);\n    case 'number | string':\n      return convertNumber(value) ?? convertString(value);\n    case 'boolean | number':\n      return convertBoolean(value) ?? convertNumber(value);\n    case 'boolean | number | string':\n      return (\n        convertBoolean(value) ?? convertNumber(value) ?? convertString(value)\n      );\n    default:\n      throw new Error(`Unhandled type: ${type}`);\n  }\n}\n\nfunction convertBoolean(value: ArgumentType) {\n  if (value === true || value === false) {\n    return value;\n  }\n\n  if (value === 'true') {\n    return true;\n  }\n\n  if (value === 'false') {\n    return false;\n  }\n}\n\nfunction convertNumber(value: ArgumentType) {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  {\n    const valueAsNumber = Number(value);\n    if (!Number.isNaN(valueAsNumber)) {\n      return valueAsNumber;\n    }\n  }\n}\n\nfunction convertString(value: ArgumentType) {\n  return `${value}`;\n}\n","// Copyright (c) Tailwind Labs, Inc. (Original)\n// Copyright (c) 2024 devcui (Modified)\n//\n// Licensed under the MIT License. See LICENSE file for details.\n\nimport { Arg } from '../../utils/args';\nimport {\n  println,\n  header,\n  wordWrap,\n  UI,\n  indent,\n  highlight,\n} from '../../utils/renderer';\nimport pc from 'picocolors';\n\nexport const helpOptions: Arg = {\n  '--help': {\n    type: 'boolean',\n    description: 'Display usage information',\n    alias: '-h',\n  },\n};\n\nexport function help({\n  invalid,\n  usage,\n  options,\n}: {\n  invalid?: string;\n  usage?: string[];\n  options?: Arg;\n}) {\n  // Available terminal width\n  const width = process.stdout.columns;\n\n  // Render header\n  println(header());\n\n  // Render the invalid command\n  if (invalid) {\n    println();\n    println(`${pc.dim('Invalid command:')} ${invalid}`);\n  }\n\n  // Render usage\n  if (usage && usage.length > 0) {\n    println();\n    println(pc.dim('Usage:'));\n    for (const [idx, example] of usage.entries()) {\n      // Split the usage example into the command and its options. This allows\n      // us to wrap the options based on the available width of the terminal.\n      const command = example.slice(0, example.indexOf('['));\n      let options = example.slice(example.indexOf('['));\n\n      // Make the options dimmed, to make them stand out less than the command\n      // itself.\n      options = options.replace(/\\[.*?\\]/g, (option) => pc.dim(option));\n\n      // The space between the command and the options.\n      const space = 1;\n\n      // Wrap the options based on the available width of the terminal.\n      const lines = wordWrap(\n        options,\n        width - UI.indent - command.length - space,\n      );\n\n      // Print an empty line between the usage examples if we need to split due\n      // to width constraints. This ensures that the usage examples are visually\n      // separated.\n      //\n      // E.g.: when enough space is available\n      //\n      // ```\n      //   Usage:\n      //     tailwindcss build [--input input.css] [--output output.css] [--watch] [options...]\n      //     tailwindcss other [--watch] [options...]\n      // ```\n      //\n      // E.g.: when not enough space is available\n      //\n      // ```\n      //   Usage:\n      //     tailwindcss build [--input input.css] [--output output.css]\n      //                       [--watch] [options...]\n      //\n      //     tailwindcss other [--watch] [options...]\n      // ```\n      if (lines.length > 1 && idx !== 0) {\n        println();\n      }\n\n      // Print the usage examples based on available width of the terminal.\n      //\n      // E.g.: when enough space is available\n      //\n      // ```\n      //   Usage:\n      //     tailwindcss [--input input.css] [--output output.css] [--watch] [options...]\n      // ```\n      //\n      // E.g.: when not enough space is available\n      //\n      // ```\n      //   Usage:\n      //     tailwindcss [--input input.css] [--output output.css]\n      //                 [--watch] [options...]\n      // ```\n      //\n      // > Note how the second line is indented to align with the first line.\n      println(indent(`${command}${lines.shift()}`));\n      for (const line of lines) {\n        println(indent(line, command.length));\n      }\n    }\n  }\n\n  // Render options\n  if (options) {\n    // Track the max alias length, this is used to indent the options that don't\n    // have an alias such that everything is aligned properly.\n    let maxAliasLength = 0;\n    for (const { alias } of Object.values(options)) {\n      if (alias) {\n        maxAliasLength = Math.max(maxAliasLength, alias.length);\n      }\n    }\n\n    // The option strings, which are the combination of the `alias` and the\n    // `flag`, with the correct spacing.\n    const optionStrings: string[] = [];\n\n    // Track the max option length, which is the longest combination of an\n    // `alias` followed by `, ` and followed by the `flag`.\n    let maxOptionLength = 0;\n\n    for (const [flag, { alias }] of Object.entries(options)) {\n      // The option string, which is the combination of the alias and the flag\n      // but already properly indented based on the other aliases to ensure\n      // everything is aligned properly.\n      const option = [\n        alias ? `${alias.padStart(maxAliasLength)}` : alias,\n        alias ? flag : ' '.repeat(maxAliasLength + 2 /* `, `.length */) + flag,\n      ]\n        .filter(Boolean)\n        .join(', ');\n\n      optionStrings.push(option);\n      maxOptionLength = Math.max(maxOptionLength, option.length);\n    }\n\n    println();\n    println(pc.dim('Options:'));\n\n    // The minimum amount of dots between the option and the description.\n    const minimumGap = 8;\n\n    for (const { description, default: defaultValue = null } of Object.values(\n      options,\n    )) {\n      // The option to render\n      const option = optionStrings.shift() as string;\n\n      // The amount of dots to show between the option and the description.\n      const dotCount = minimumGap + (maxOptionLength - option.length);\n\n      // To account for the space before and after the dots.\n      const spaces = 2;\n\n      // The available width remaining for the description.\n      const availableWidth =\n        width - option.length - dotCount - spaces - UI.indent;\n\n      // Wrap the description and the default value (if present), based on the\n      // available width.\n      const lines = wordWrap(\n        defaultValue !== null\n          ? `${description} ${pc.dim(`[default:\\u202F${highlight(`${defaultValue}`)}]`)}`\n          : description,\n        availableWidth,\n      );\n\n      // Print the option, the spacer dots and the start of the description.\n      println(\n        indent(\n          `${pc.blue(option)} ${pc.dim(pc.gray('\\u00B7')).repeat(dotCount)} ${lines.shift()}`,\n        ),\n      );\n\n      // Print the remaining lines of the description, indenting them to align\n      // with the start of the description.\n      for (const line of lines) {\n        println(\n          indent(`${' '.repeat(option.length + dotCount + spaces)}${line}`),\n        );\n      }\n    }\n  }\n}\n","// Copyright (c) 2024 devcui\n//\n// Licensed under the MIT License. See LICENSE file for details.\n\nimport { drainStdin } from './build/utils';\nimport fs from 'node:fs';\nimport { eprintln, println } from '../utils/renderer';\nimport { handle, options } from './build';\nimport { Result } from 'src/utils/args';\n\nexport interface Theme {\n  name: string;\n  input: string;\n}\n\nexport interface WrappedTheme {\n  $schema: string;\n  themes: Theme[];\n}\n\nexport interface ThemeContent {\n  name: string;\n  css: string;\n}\n\nconst json = String.raw;\n\n/**\n * read theme json from cli argument\n */\nexport async function readJson(commandArg: string | null): Promise<Theme[]> {\n  let content: string = json`{}`;\n  if (commandArg) {\n    if (commandArg === '-') {\n      content = await drainStdin();\n    } else {\n      content = await fs.promises.readFile(commandArg, 'utf-8');\n    }\n  }\n  const wrappedTheme: WrappedTheme = JSON.parse(content);\n  if (!wrappedTheme.themes) {\n    eprintln(\n      'Invalid theme file. Please check if the file is a valid JSON file.',\n    );\n    process.exit(1);\n  }\n  return wrappedTheme.themes;\n}\n\nexport async function buildTheme(args: Result<ReturnType<typeof options>>) {\n  const themes: Theme[] = await readJson(args['--input']);\n  const themeArgs = generateArgs(themes, args);\n  await Promise.all(\n    themeArgs.map(async (arg) => {\n      eprintln(`building ${arg['--input']} file...`);\n      await handle(arg);\n    }),\n  );\n}\n\nexport function generateArgs(\n  themes: Theme[],\n  args: Result<ReturnType<typeof options>>,\n): Result<ReturnType<typeof options>>[] {\n  return themes.map((theme) => {\n    return {\n      ...args,\n      '--input': theme.input,\n      '--output': `${args['--output']}/${theme.name}.css`,\n    };\n  });\n}\n","#!/usr/bin/env node\n\n// Copyright (c) Tailwind Labs, Inc. (Original)\n// Copyright (c) 2024 devcui (Modified)\n//\n// Licensed under the MIT License. See LICENSE file for details.\n\nimport * as build from './commands/build/index.ts';\nimport { Arg, args } from './utils/args.ts';\nimport { help } from './commands/help/index.ts';\nimport { buildTheme } from './commands/theme.ts';\n\nconst sharedOptions = {\n  '--help': {\n    type: 'boolean',\n    description: 'Display usage information',\n    alias: '-h',\n  },\n} satisfies Arg;\n\nconst flags = args({\n  ...build.options(),\n  ...sharedOptions,\n});\nconst command = flags._[0];\n\n// Right now we don't support any sub-commands. Let's show the help message\n// instead.\nif (command) {\n  help({\n    invalid: command,\n    usage: ['tailwind-plugin-theme [options]'],\n    options: { ...build.options(), ...sharedOptions },\n  });\n  process.exit(1);\n}\n\n// Display main help message if no command is being used.\n//\n// E.g.:\n//\n//   - `tailwindcss`                // should show the help message\n//\n// E.g.: implicit `build` command\n//\n//   - `tailwindcss -o output.css`  // should run the build command, not show the help message\n//   - `tailwindcss > output.css`   // should run the build command, not show the help message\nif ((process.stdout.isTTY && !flags['--output']) || flags['--help']) {\n  help({\n    usage: [\n      'tailwind-plugin-theme [--input input.css] [--output output.css] [--watch] [options…]',\n    ],\n    options: { ...build.options(), ...sharedOptions },\n  });\n  process.exit(0);\n}\n\n// Handle the build command\nbuildTheme(flags);\n"],"mappings":"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","names":["watcher","compile","env","clearRequireCache","Scanner","Features","transform","existsSync","fs","path","_disposables","Disposables","__privateAdd","cb","timer","dispose","__privateGet","fs","path","stripVTControlCharacters","pc","EnhancedResolve","fs","createRequire","localResolve","resolve","id","resolver","formatNanoseconds","input","ns","UI","header","pc","getVersion","highlight","file","relative","to","from","preferAbsoluteIfShorter","result","path","wordWrap","text","width","words","lines","line","lineLength","word","wordLength","stripVTControlCharacters","formatDuration","ns","formatted","formatNanoseconds","indent","value","offset","eprintln","println","version","fs","resolve","fs","path","drainStdin","resolve","reject","result","chunk","err","outputFile","file","contents","options","css","handleError","fn","err","eprintln","handle","args","base","path","existsSync","highlight","relative","start","input","drainStdin","fs","previous","write","output","env","optimizedCss","optimizeCss","outputFile","println","inputFilePath","inputBasePath","fullRebuildPaths","createCompiler","compiler","compile","sources","scanner","Scanner","cleanupWatchers","createWatchers","watchDirectories","files","changedFiles","rebuildStrategy","resolvedFullRebuildPaths","file","compiledCss","clearRequireCache","candidates","newCleanupWatchers","newCandidates","end","formatDuration","globEntry","dirs","cb","z","toRemove","i","j","dir","watchers","Disposables","debounceQueue","enqueueCallback","unsubscribe","watcher","events","event","stats","minify","optimize","code","transform","Features","parse","args","options","argv","parsed","result","flag","type","alias","defaultValue","key","convert","value","convertString","convertBoolean","convertNumber","valueAsNumber","pc","help","invalid","usage","options","width","println","header","pc","idx","example","command","option","lines","wordWrap","UI","indent","line","maxAliasLength","alias","optionStrings","maxOptionLength","flag","minimumGap","description","defaultValue","dotCount","spaces","availableWidth","highlight","fs","json","readJson","commandArg","content","drainStdin","fs","wrappedTheme","eprintln","buildTheme","args","themes","themeArgs","generateArgs","arg","handle","theme","sharedOptions","flags","args","options","command","help","buildTheme"]}